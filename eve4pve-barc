#!/bin/bash

# EnterpriseVE Backup And Restore Ceph for Proxmox VE.
# Author: Daniele Corsini <daniele.corsini@enterpriseve.com>

declare -r VERSION=0.2.1
declare -r NAME=$(basename "$0")
declare -r PROGNAME=${NAME%.*}

declare -r PVE_DIR="/etc/pve"
declare -r PVE_FIREWALL="$PVE_DIR/firewall"
declare -r PVE_NODES="$PVE_DIR/nodes"
declare -r QEMU='qemu-server'
declare -r LXC='lxc'
declare -r QEMU_CONF_CLUSTER="$PVE_NODES/*/$QEMU"
declare -r LXC_CONF_CLUSTER="$PVE_NODES/*/$LXC"

declare -r LOG_FILE=$(mktemp)

declare -r EXT_IMAGE='.img'
declare -r EXT_DIFF='.diff'
declare -r EXT_CONF='.conf'
declare -r EXT_FIREWALL='.fw'

declare opt_vm_ids=''
declare -i opt_keep=1
declare -i opt_syslog=0
declare -i opt_debug=0
declare -i opt_dry_run=0
declare opt_path_backup=''
declare opt_label=''
declare opt_script=''
declare opt_addr_mail=''
declare -i opt_unprotect_snap=0

declare snap_name_prefix=''
declare path_backup=''
declare -i vm_id=0
declare -A vm_ids


declare -A -g pvnode


function map_vmids_to_host(){
    for node in $(/usr/bin/pvecm nodes | tail +5 | tr -s ' ' | cut -d' ' -f 4)
    do
        for vm in $(ssh root@$node qm list|tail +2|tr -s ' '|cut -f 2 -d' ')
        do
            pvnode[$vm]=$node
        done
    done
}


function usage(){
   shift

    if [ "$1" != "--no-logo" ]; then
        cat << EOF
    ______      __                       _              _    ________
   / ____/___  / /____  _________  _____(_)_______     | |  / / ____/
  / __/ / __ \/ __/ _ \/ ___/ __ \/ ___/ / ___/ _ \    | | / / __/
 / /___/ / / / /_/  __/ /  / /_/ / /  / (__  )  __/    | |/ / /___
/_____/_/ /_/\__/\___/_/  / .___/_/  /_/____/\___/     |___/_____/
                         /_/

EOF
    fi

    cat << EOF
EnterpriseVE Backup And Restore Ceph for Proxmox VE  (Made in Italy)

Usage:
    $PROGNAME <COMMAND> [ARGS] [OPTIONS]
    $PROGNAME help
    $PROGNAME version
 
    $PROGNAME create   --vmid=<string> --label=<string> --path=<string> --keep=<integer>
                          --script=<string> --mail=<string> --unprotect-snap --syslog 
    $PROGNAME destroy  --vmid=<string> --label=<string> --path=<string> 
    $PROGNAME enable   --vmid=<string> --label=<string> --path=<string> 
    $PROGNAME disable  --vmid=<string> --label=<string> --path=<string> 

    $PROGNAME backup   --vmid=<string> --label=<string> --path=<string> --keep=<integer>
                          --script=<string> --mail=<string> --unprotect-snap --syslog 
    $PROGNAME restore  --vmid=<string> --label=<string> --path=<string>
                          --script=<string> --syslog 

    $PROGNAME status   --vmid=<string> --label=<string> --path=<string>   
    $PROGNAME clean    --vmid=<string> --label=<string> --path=<string> --keep=<integer>
    $PROGNAME reset    --vmid=<string> --label=<string>   
    $PROGNAME assemble --vmid=<string> --label=<string> --path=<string>
                          --script=<string> 
Commands:
    version              Show version program
    help                 Show help program
    create               Create backup job from scheduler
    destroy              Remove backup job from scheduler
    enable               Enable backup job from scheduler
    disable              Disable backup job from scheduler
    status               Get list of all backups
    clean                Clear all backup
    reset                Remove all snapshots on images specific VM/CT in Ceph
    backup               Will backup one time
    restore              Will restore image one time
    assemble             Assemble a unique image with diff file. (Require eve4ceph-mdti)

Options:
    --vmid               The ID of the VM/CT, comma separated (es. 100,101,102), 
                         'all-???' for all known guest systems in specific host (es. all-pve1, all-\$(hostname)),
                         'all' for all known guest systems in cluster,
                         'storage-???' storage Proxmox VE (pool Ceph) 
    --label              Is usually 'hourly', 'daily', 'weekly', or 'monthly'
    --path               Path destination backup
    --keep               Specify the number of backup which should will keep, Default 1
    --script             Use specified hook script
                         E.g. /usr/share/doc/$PROGNAME/examples/script-hook.sh
    --syslog             Write messages into the system log
    --mail               Email addresses send log backup, comma separated (es. info@domain.ltd,info1@domain.ltd)
    --unprotect-snap     Disable protection snapshot, default is protected.
                         In Proxmox VE 'protected snapshot' cause problem in remove VM/CT see documentation.

Report bugs to <support@enterpriseve.com>
EOF

    exit 1
}

function log(){
    local level=$1
    shift 1
    local message=$*

    case $level in
        debug) 
            if [ $opt_debug -eq 1 ]; then
                echo -e "$(date "+%F %T") DEBUG: $message";
                echo -e "$(date "+%F %T") DEBUG: $message" >> "$LOG_FILE";
            fi    
            ;;

        info) 
            echo -e "$message"; 
            echo -e "$message" >> "$LOG_FILE";
            [ $opt_syslog -eq 1 ] && logger -t "$PROGNAME" "$message"
            ;;
        
        error)
            echo "ERROR: $message" 1>&2
            echo -e "$message" >> "$LOG_FILE";            
            [ $opt_syslog -eq 1 ] && logger -t "$PROGNAME" -p daemon.err "$message"
            ;;

        *)  
            echo "$message" 1>&2
            echo -e "$message" >> "$LOG_FILE";            
            [ $opt_syslog -eq 1 ] && logger -t "$PROGNAME" "$message"
            ;;
    esac
}

function get_vm_ids(){
    local data=''
    local conf=''

    while [ $# -gt 0 ]; do
        for conf in $1; do
            [ ! -e "$conf" ] && break

            conf=$(basename "$conf")
            [ "$data" != '' ] && data="$data,"
            data="$data${conf%.*}"
        done
        shift
    done

    echo "$data"
}

function exist_file(){
    local file=''
    for file in $1; do
        [ -e "$file" ] && return 0 || return 1
        break
    done
}

function parse_opts(){
    local action=$1
    shift

    local args
    args=$(getopt \
           --options '' \
           --longoptions=path:,vmid:,label:,keep:,mail: \
           --longoptions=script:,syslog,debug,dry-run,unprotect-snap \
           --name "$PROGNAME" \
           -- "$@") \
           || end_process 128

    eval set -- "$args"

    while true; do    
      case "$1" in
        --vmid) opt_vm_ids=$2; shift 2;;
        --label) opt_label="$2"; shift 2;;
        --keep) opt_keep=$2; shift 2;;
        --path) opt_path_backup="$2"; shift 2;;
        --script) opt_script="$2"; shift 2;;
        --syslog) opt_syslog=1; shift;;
        --debug) opt_debug=1; shift;;
        --dry-run) opt_dry_run=1; shift;;
        --unprotect-snap) opt_unprotect_snap=1; shift;;
        --mail) opt_addr_mail="$2"; shift 2;;
        --) shift; break;;
        *) break;;
      esac
    done

    if [ $opt_debug -eq 1 ]; then
        log info "============================================"
        log info "EnterpriseVE BARC Version: $VERSION";
        log info "============================================"
        log info "Proxmox VE Version:"

        #info proxmox
        pveversion --verbose

        log info "============================================"
    fi

    if [ "$action" != "reset" ]; then
        [ ! -d "$opt_path_backup" ] && { log info "Path Backup is not set"; end_process 1; }
    fi

    [ -z "$opt_vm_ids" ] && { log info "VM id is not set."; end_process 1; }
    if [ "$opt_vm_ids" = "all" ]; then
        #all in cluster

        local data=''
        data=$(get_vm_ids "$QEMU_CONF_CLUSTER/*$EXT_CONF" "$LXC_CONF_CLUSTER/*$EXT_CONF")
        vm_ids=$(echo "$data" | tr ',' '\n')

    elif [[ "$opt_vm_ids" == "all-"* ]]; then
        #all in specific host

        local host=${opt_vm_ids#*-}
        
        if ! exist_file "$PVE_NODES/$host"; then
            log info "Host not found!"
            end_process 1
        fi

        local data=''
        data=$(get_vm_ids "$PVE_NODES/$host/$QEMU/*$EXT_CONF" "$PVE_NODES/$host/$LXC/*$EXT_CONF")
        [ -z "$data" ] && { log info "VM id is not set."; end_process 1; }

        vm_ids=$(echo "$data" | tr ',' '\n')

    elif [[ "$opt_vm_ids" == "storage-"* ]]; then
        #all in specific storage (pool Ceph)

        local storage=${opt_vm_ids#*-}

        if ! pvesm list "$storage" > /dev/null 2>&1; then    
            log info "Pool '$storage' not found in Proxmox VE storage." 
            end_process 1
        fi

        vm_ids=$(pvesm list "$storage" | awk '{print $4}' | awk '!a[$0]++' )

    else
        #comma separated
        vm_ids=$(echo "$opt_vm_ids" | tr ',' '\n')
        
    fi

    [ -z "$opt_label" ] && { log info "Label is not set correctly"; end_process 1; }
    [ "$opt_keep" -le 0 ] && { log info "Keep is not set correctly. Value > 0."; end_process 1; }

    snap_name_prefix="barc$opt_label"
}

function get_path(){
    path_backup="$opt_path_backup/barc/$vm_id/$opt_label"
}

function cron_action_job(){
    local action=$1
    parse_opts "$@"

    local -r cron_file="/etc/cron.d/$PROGNAME"    
    local -r job_key_cron="backup --vmid=$opt_vm_ids --label='$opt_label' --path='$opt_path_backup'"
    
    #create cron file if not exist
    if [ ! -e "$cron_file" ]; then
        cat > "$cron_file" << EOL
#Cron file for $PROGNAME automatically generated
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

EOL
    fi    

    local check=0; [ "$action" = "create" ] && check=1 
    if grep -h "$job_key_cron" "$cron_file"; then
        [ $check -eq 1 ] && { log info "Job already exists in cron file '$cron_file'"; exit 1; }
    else
        [ $check -eq 0 ] && { log info "Job not exists in cron file '$cron_file'"; exit 1; }
    fi

    #action
    case $action in
        create)
            local cron_scheduling="0 0 * * *"             #Default run once a day at midnight

            case "$opt_label" in
                (*hourly*) cron_scheduling="0 * * * *";;  #Run once an hour at the beginning of the hour	
                (*daily*) cron_scheduling="0 0 * * *";;   #Run once a day at midnight             
                (*weekly*) cron_scheduling="0 0 * * 0";;  #Run once a week at midnight on Sunday morning	
                (*monthly*) cron_scheduling="0 0 1 * *";; #Run once a month at midnight of the first day of the month
            esac

            local job="$cron_scheduling root $PROGNAME $job_key_cron --keep=$opt_keep"

            [ -e "$opt_script" ] && job="$job --script='$opt_script'"
            [ $opt_unprotect_snap -eq 1 ] && job="$job --unprotect-snap"
            [ $opt_syslog -eq 1 ] && job="$job --syslog"     
            [ ! -z "$opt_addr_mail" ] && job="$job --mail='$opt_addr_mail'"  

            echo -e "$job" >> "$cron_file"
            ;;

        destroy) sed -i "\?$job_key_cron?d" "$cron_file";;
        enable) sed -i "\?$job_key_cron?s?^#??g" "$cron_file";;
        disable) sed -i "\?$job_key_cron?s?^?#?g" "$cron_file";;
    esac

    echo -e "Job $action in cron file '$cron_file'";
}

function do_run(){
    local cmd=$*;
    local -i rc=0;

    if [ $opt_dry_run -eq 1 ]; then
        echo "$cmd"
        rc=$?
    else
        log debug "$cmd"
        eval "$cmd"
        rc=$?
        [ $rc != 0 ] && log error "$cmd"
        log debug "return $rc"
    fi

    return $rc
}

function clean(){
    parse_opts "$@"

    local begin=$SECONDS
    log debug "$PROGNAME $VERSION"
    log debug "Command line: $*"

    call_hook_script "clean-job-start" "-" "-"

    for vm_id in $vm_ids; do
        get_path
        merge_diff_backup
    done

    vm_id=0

    call_hook_script "clean-job-end" "-" "-"

    log debug "Execution: $((SECONDS-begin)) sec."
}

function create_snapshot(){
    local snap="$1"

    call_hook_script "snap-create-pre" "$snap" "-"
    log info "VM $vm_id - Creating snapshot $snap"

    if ! do_run "rbd snap create $snap"; then    
        call_hook_script "snap-create-abort" "$snap" "-"
        return 1;
    fi

    #check if protected/unprotect mode snapshot
    if [ $opt_unprotect_snap -eq 0 ]; then
        if ! do_run "rbd snap protect $snap"; then    
            call_hook_script "snap-create-abort" "$snap" "-"
            return 1;
        fi
    else
        log info "VM $vm_id - !!!!! >>> UNPROTECTED SNAPSHOT $snap <<< !!!!!"
    fi

    call_hook_script "snap-create-post" "$snap" "-"
}

function remove_snaphot(){
    local snap="$1"
    local hook="$2"

    [ "$hook" -eq 1 ] && call_hook_script "snap-remove-pre" "$snap" "-"
    log info "VM $vm_id - Remove snapshot $snap"
    
    #check is protectd
    local info; info=$(rbd info $snap | grep 'protected: True');
    if [ ! -z "$info" ]; then
        if ! do_run "rbd snap unprotect $snap"; then    
            [ "$hook" -eq 1 ] && call_hook_script "snap-remove-abort" "$snap" "-"
            return 1;
        fi
    fi

    if ! do_run "rbd snap rm $snap"; then    
        [ "$hook" -eq 1 ] && call_hook_script "snap-remove-abort" "$snap" "-"
        return 1;
    fi

    [ "$hook" -eq 1 ] && call_hook_script "snap-remove-post" "$snap" "-"
}

function call_hook_script(){
    export EVE4PVE_BARC_PHASE="$1"
    export EVE4PVE_BARC_SNAP_NAME="$2"
    export EVE4PVE_BARC_BACKUP_FILE="$3"
    export EVE4PVE_BARC_VMID=$vm_id
    export EVE4PVE_BARC_PATH="$opt_path_backup"
    export EVE4PVE_BARC_LABEL="$opt_label"
    export EVE4PVE_BARC_KEEP=$opt_keep
    export EVE4PVE_BARC_HOST="$5"

    log debug "-------------------------------------------------------" 
    log debug "EVE4PVE_BARC_PHASE:          $EVE4PVE_BARC_PHASE" 
    log debug "EVE4PVE_BARC_VMID:           $EVE4PVE_BARC_VMID" 
    log debug "EVE4PVE_BARC_PATH:           $EVE4PVE_BARC_PATH" 
    log debug "EVE4PVE_BARC_LABEL:          $EVE4PVE_BARC_LABEL" 
    log debug "EVE4PVE_BARC_KEEP:           $EVE4PVE_BARC_KEEP" 
    log debug "EVE4PVE_BARC_SNAP_NAME:      $EVE4PVE_BARC_SNAP_NAME" 
    log debug "EVE4PVE_BARC_BACKUP_FILE:    $EVE4PVE_BARC_BACKUP_FILE" 
    log debug "EVE4PVE_BARC_HOST:           $EVE4PVE_BARC_HOST"
    log debug "-------------------------------------------------------" 

    if [ -e "$opt_script" ]; then
        log debug "VM $vm_id - Script hook: $opt_script" 
        do_run "$opt_script"
    fi
}

function get_disks_from_config(){
    local disks;
    local file_config=$1

    #disks available for vm/ct
    #exclude no backup
    #read current config
    disks=$(while read -r line; do
                [[ "$line" == "" ]] && break
                echo "$line" 
            done < "$file_config" | \
            grep -P '^(?:((?:virtio|ide|scsi|sata|mp)\d+)|rootfs): ' | \
            grep -v -P 'cdrom|none' | \
            grep -v -P 'backup=0' | \
            awk '{ split($0,a,","); split(a[1],b," "); print b[2]}')

    echo "$disks"
}

function backup(){
    local -i rc=0;

    parse_opts "$@"

    log info "ACTION: Backup"

    local timestamp; timestamp=$(date +%y%m%d%H%M%S)
    log info "Start backup $(date "+%F %T")"

    #create pid file
    local pid_file="/var/run/$PROGNAME.pid"
    if [[ -e "$pid_file" ]]; then
        local pid; pid=$(cat "${pid_file}")
        if ps -p "$pid" > /dev/null 2>&1; then
          log error "Process already running with pid ${pid}"
          end_process 1
        fi
    fi

    if ! echo $$ > "$pid_file"; then
        log error "Could not create PID file $pid_file"
        end_process 1
    fi

    call_hook_script "backup-job-start" "-" "-"

    map_vmids_to_host

    for vm_id in $vm_ids; do
        local file_config; file_config=$(get_config_file)        
        [ -z "$file_config" ] && continue


        #create path backup
        get_path
        if ! mkdir -p "$path_backup"; then
            log error "VM $vm_id - Problem creation path '$path_backup'"
            rc=10
            continue
        fi

        local -a export_image_spec=()
        local -a export_current_snap=()
        local -a export_backup_file=()
        local -a export_latest_snap=()
        local -a export_type=()
        local -i export_idx=0

        local image_spec
        local current_snap
        local backup_file
        local latest_snap

        log info "VM $vm_id - ======== Start backup ========"
        log info "VM $vm_id - -------- Snapshots Disks --------"

	    call_hook_script "snap-vm-pre" "-" "-" "-" ${pvnode[$vm_id]} 

        #loop disk create snapshot
        local disk=''
        for disk in $(get_disks_from_config "$file_config"); do
            #check rbd device image-spec is pool-name/image-name
            image_spec=$(get_image_spec "$disk")
            [ -z "$image_spec" ] && continue 

            #pool-name/image-name@snap-name
            current_snap="$image_spec@$snap_name_prefix$timestamp"

            local suffix_backup_file=${image_spec//\//.}
            backup_file="$path_backup/$timestamp$suffix_backup_file"

            #data export
            export_current_snap[$export_idx]="$current_snap"
            export_image_spec[$export_idx]="$image_spec"
            export_latest_snap[$export_idx]=""
            export_type[$export_idx]=""

            #check exist initial export
            if ! exist_file "$path_backup/*$suffix_backup_file$EXT_IMAGE"; then
                #initial export not exist            
                backup_file="$backup_file$EXT_IMAGE"
                
                if ! create_snapshot "$current_snap"; then
                    rc=20                         
                    break;
                fi

                export_type[$export_idx]="image"

            else
                #incremental backup
                backup_file="$backup_file$EXT_DIFF"

                #find last snapshot in ceph
                latest_snap=$(rbd snap ls "$image_spec" | \
                              awk '{print $2}' | \
                              grep "$opt_label" | sort -r | head -n 1)

                #not exist snapshot on rbd
                if [ -z "$latest_snap" ]; then
                    log error "VM $vm_id - Ceph last snapshot '$image_spec' not found!";                    
                    call_hook_script "export-diff-abort" "-" "-"                 
                    rc=30                         
                    break;
                fi

                #verify exist last snapshot ceph in file backup
                #timestamp last snapshot
                local tms_latest_snap
                tms_latest_snap=$(echo "$latest_snap" | \
                                  awk -v prf="$snap_name_prefix" '{print substr($1,length(prf)+1)}')

                if ! exist_file "$path_backup/$tms_latest_snap$suffix_backup_file.*"; then
                    log error "VM $vm_id - Ceph snapshot '$image_spec@$latest_snap' not found in backup '$path_backup/$tms_latest_snap$suffix_backup_file.*'";                    
                    call_hook_script "export-diff-abort" "-" "-"  
                    rc=40                         
                    break;
                fi

                #verify exist last backup in ceph snapshot
                local latest_backup
                latest_backup=$(ls -r "$path_backup/"*$suffix_backup_file.* | \
                                head -n 1 | \
                                xargs -n 1 basename | \
                                awk '{print substr($1,1,12)}')

                latest_backup="$snap_name_prefix$latest_backup"

                if ! rbd snap ls "$image_spec" | awk '{print $2}' | grep -q "$latest_backup"; then
                    log error "VM $vm_id - Backup '$latest_backup' not found in ceph '$image_spec' snapshot!";                    
                    call_hook_script "export-diff-abort" "-" "-" 
                    rc=50                        
                    break;
                fi
                
                if ! create_snapshot "$current_snap"; then
                    rc=60                        
                    break;
                fi

                export_latest_snap[$export_idx]="$latest_snap"
                export_type[$export_idx]="diff"
             
            fi

            export_backup_file[$export_idx]="$backup_file"

            let export_idx++
        done

	    call_hook_script "snap-vm-post" "-" "-" "-" ${pvnode[$vm_id]}

        log info "VM $vm_id - -------- Export images -------- "

        #loop export file from Ceph
        for (( i=0; i<${#export_current_snap[@]}; i++ )); do
            image_spec=${export_image_spec[$i]};
            current_snap=${export_current_snap[$i]};
            backup_file=${export_backup_file[$i]};
            latest_snap=${export_latest_snap[$i]};
            type=${export_type[$i]};

            if [ "$type" == "image" ]; then
                #export initial
                call_hook_script "export-pre" "$current_snap" "$backup_file"

                log info "VM $vm_id - Export initial '$backup_file'"
                if ! do_run "rbd export --rbd-concurrent-management-ops 20 $current_snap '$backup_file'"; then
                    remove_snaphot "$current_snap" 0

                    call_hook_script "export-abort" "$current_snap" "$backup_file"

                    log info "VM $vm_id - Remove file '$backup_file'"
                    rm -f "$backup_file"

                    break;
                fi
                log info "VM $vm_id - Size $(get_size_file "$backup_file")"

                call_hook_script "export-post" "$current_snap" "$backup_file"

            elif [ "$type" == "diff" ]; then
                #export-diff difference previous snapshot 
                call_hook_script "export-diff-pre" "$current_snap" "$backup_file"

                log info "VM $vm_id - Export diff '$backup_file'"
                if ! do_run "rbd export-diff --from-snap $latest_snap $current_snap '$backup_file'"; then
                    remove_snaphot "$current_snap" 0

                    call_hook_script "export-diff-abort" "$current_snap" "$backup_file"

                    log info "VM $vm_id - Remove file '$backup_file'"
                    rm -f "$backup_file"
                    
                    break;
                fi
                log info "VM $vm_id - Size $(get_size_file "$backup_file")" 

                call_hook_script "export-diff-post" "$current_snap" "$backup_file"

                #remove previous snapshot
                remove_snaphot "$image_spec@$latest_snap" 1
            fi
        done

        #copy config files
        log info "VM $vm_id - -------- Copy config --------"
        do_run "cp '$file_config' '$path_backup/$timestamp$EXT_CONF'"

        #copy firewall files
        local file_firewall="$PVE_FIREWALL/$vm_id$EXT_FIREWALL"
        if [ -e "$file_firewall" ]; then
            log info "VM $vm_id - -------- Copy firewall --------"
            do_run "cp '$file_firewall' '$path_backup/$timestamp$EXT_FIREWALL'"
        fi

        log info "VM $vm_id - -------- Merge diff file --------"
        merge_diff_backup
    done

    vm_id=0

    rm "$pid_file"

    call_hook_script "backup-job-end" "-" "-"        

    timestamp=$(date +%y%m%d%H%M%S)
    log info "End backup $(date "+%F %T")"

    end_process $rc 
}

function get_size_file(){
    echo $(ls -lh "$1" | awk '{print $5}')
}

function sum_size_file(){
    sumbytes=$((sumbytes+$(ls -lh "$1" | awk '{print $5}')))
}


function merge_diff_backup(){
    #loop all image
    local image=''
    for image in $path_backup/*$EXT_IMAGE; do
        image=$(basename "$image")
       
        local suffix_backup_file=${image:12}        
        suffix_backup_file=${suffix_backup_file%.*}

        local first_diff=''
        local second_diff=''
        local -i index=1

        #loop diff
        local export_diff=''
        for export_diff in $(ls -r "$path_backup/"*$suffix_backup_file$EXT_DIFF 2>/dev/null); do
            if [ "$index" -ge "$opt_keep" ]; then            
                if [ -z "$second_diff" ]; then
                    second_diff="$export_diff"
                else
                    first_diff="$export_diff"
                    merged_diff="$second_diff-merged"

                    log info "VM $vm_id - Merge diff backup '$(basename "$first_diff")' '$(basename "$second_diff")'"

                    if do_run "rbd merge-diff '$first_diff' '$second_diff' '$merged_diff'"; then
                        #ok result
                        log info "VM $vm_id - Removing backup '$first_diff'"; 
                        do_run "rm '$first_diff'"
                        
                        log info "VM $vm_id - Removing backup '$second_diff'"
                        do_run "rm '$second_diff'"    

                        #rename new merge in second_diff
                        do_run "mv '$merged_diff' '$second_diff'"

                        #remove config
                        local tms_first_diff; tms_first_diff=$(basename "$first_diff" | awk '{print substr($1,1,12)}') 
                        do_run "rm -f '$path_backup/$tms_first_diff$EXT_CONF'"

                        #remove firewall
                        local file_firewall="$path_backup/$tms_first_diff$EXT_FIREWALL"
                        [ -e "$file_firewall" ] && do_run "rm '$file_firewall'"
                    
                        first_diff=''
                        second_diff=''                      
                    else    
                        #Error
                        log error "VM $vm_id - Merge diff backup '$(basename $first_diff)' '$(basename $second_diff)' to '$(basename "$merged_diff")'"
                        do_run "rm -f $merged_diff"

                        return 1
                    fi
                fi
            fi

            let index++
        done
    done
}

function get_config_file(){
    local file_config=''

    if exist_file "$QEMU_CONF_CLUSTER/$vm_id$EXT_CONF"; then
        file_config=$(ls $QEMU_CONF_CLUSTER/$vm_id$EXT_CONF)

    elif exist_file "$LXC_CONF_CLUSTER/$vm_id$EXT_CONF"; then
        file_config=$(ls $LXC_CONF_CLUSTER/$vm_id$EXT_CONF)
    
    else
        log error "VM $vm_id - Unknown tecnology"

    fi 

    echo "$file_config"
}

function get_image_spec(){
    local image_spec;
    local disk="$1"
    
    #if krbd enable
    image_spec=$(pvesm path "$disk" | grep '^/dev/rbd/' | sed -e "s/^\/dev\/rbd\///")
    if [ -z "$image_spec" ]; then
        image_spec=$(pvesm path "$disk" | grep '/ceph/' | awk '{ split($0,a,":"); print a[2]}')
    fi

    echo "$image_spec"
}

function reset(){
    parse_opts "$@"
    
    for vm_id in $vm_ids; do
        local file_config; file_config=$(get_config_file)        
        [ -z "$file_config" ] && continue

        #decode disk
        local disk=''
        for disk in $(get_disks_from_config "$file_config"); do
            #check rbd device image-spec is pool-name/image-name
            local image_spec; image_spec=$(get_image_spec "$disk")
            [ -z "$image_spec" ] && continue 

            local snap_name
            for snap_name in $(rbd snap ls "$image_spec" | \
                               awk '{print $2}' | 
                               grep "$opt_label" | sort -r); do 

                remove_snaphot "$image_spec@$snap_name" 0
            done
        done
    done;
}

function restore(){
    parse_opts "$@"

    log info "ACTION: Restore image"

    for vm_id in $vm_ids; do
        get_path   

        local title="EnterpriseVE BARC | Restore image"

        #list all image available 
        images=($(ls "$path_backup/"*$EXT_IMAGE | \
                  xargs -n 1 basename | \
                  awk '{printf "%s %s\n",substr($1,13,length($1)-16),substr($1,13,length($1)-16)}'))

        #select image to recovery
        local image;
        image=$(whiptail --title "$title" \
                --menu "Choose from available images:" \
                --notags 25 60 14 "${images[@]}" 3>&1 1>&2 2>&3)

        [ -z "$image" ] && exit 1

        #list all date available 
        timestamps=($(ls -r "$path_backup/"*$image* | \
                      xargs -n 1 basename | \
                      awk '{print substr($1,1,12),substr($1,1,2) "-" substr($1,3,2) "-" substr($1,5,2) "_" substr($1,7,2) ":" substr($1,9,2) ":" substr($1,11,2)}'))

        #select timestamp
        local timestamp
        timestamp=$(whiptail --title "$title" \
                    --menu "Choose from available date [$image]:" \
                    --notags 25 60 14 "${timestamps[@]}" 3>&1 1>&2 2>&3)

        [ -z "$timestamp" ] && exit 1

        #list all pools
        pools=($(rados lspools | awk '{printf "%s %s\n",$1,$1}'))

        #select timestamp
        local pool_name; 
        pool_name=$(whiptail --title "$title" \
                    --menu "Choose from available Ceph pools:" \
                    --notags 25 60 14 "${pools[@]}" 3>&1 1>&2 2>&3)

        [ -z "$pool_name" ] && exit 1

        while true; do
            #name_import
            local name_import; 
            name_import=$(whiptail --title "$title" \
                        --inputbox "Specify image name import" 8 78 \
                        "$(echo "$image" | awk '{ split($0,a,"."); print a[2]}')" 3>&1 1>&2 2>&3)
                
            [ -z "$name_import" ] && exit 1    
            if ! rbd ls "$pool_name" | grep -q "$name_import"; then
                break;
            else
                whiptail --title "$title" --msgbox "Image $pool_name/$name_import exist!" 8 78
            fi
        done

        if ! whiptail --title "$title" --yesno "Confrim restore $image in $pool_name/$name_import?" 8 78; then
            exit 1
        fi

        call_hook_script "restore-job-start" "-" "-"

        log info "Start restore $(date "+%F %T")"

        local backup=''
        for backup in $path_backup/*$image*; do
            local timestamp_snap; timestamp_snap=$(basename "$backup" | awk '{print substr($1,1,12)}')
            if [[ $backup == *".img" ]]; then
                #initial import 
                log info "Initial import $(basename "$backup")"
                do_run "rbd import --image-format 2 '$backup' $pool_name/$name_import"
                #create initlal snap name
                local snap_name_restore="$snap_name_prefix$timestamp_snap"
                do_run "rbd snap create $pool_name/$name_import@$snap_name_restore"
            elif [[ $timestamp_snap -lt $timestamp || $timestamp_snap -eq $timestamp ]]; then
                #differential
                log info "Differential $(basename "$backup")"
                do_run "rbd import-diff '$backup' $pool_name/$name_import"
            else
                #skipped diffs, if not latest timestamp selected to restore
                log info "Diff skipped - $(basename "$backup")"
            fi
        done

        #remove all snapshots
        log info "Remove all snapshots"
        do_run "rbd snap purge $pool_name/$name_import"

        log info "Backup $image restored in $pool_name/$name_import with success!"    
        log info "Consider to manually create VM/CT and change config file from backup adapting restored image."    

        call_hook_script "restore-job-end" "-" "-"

        log info "End restore $(date "+%F %T")"

        break;
    done
}

function status(){
    parse_opts "$@"

    local print_header=1

    for vm_id in $vm_ids; do
        get_path

        local image=''
        for image in $path_backup/*$EXT_IMAGE; do
            [ ! -e "$image" ] && continue

            image=$(basename "$image")
            image=${image:12:${#image}-12-4}

            local backup=''
            for backup in $path_backup/*$image*; do
                if [ $print_header -eq 1 ]; then
                    print_header=0
                    echo "VM  TYPE SIZE  BACKUP            IMAGE"
                fi

                local filename; filename=$(basename "$backup")
                local extension=${filename##*.}

                printf "%-3s %-4s %5s %-6s %-6s %s \n" \
                       "$vm_id" \
                       "$extension" \
                       "$(get_size_file "$backup")" \
                       "${filename:0:2}-${filename:2:2}-${filename:4:2}" \
                       "${filename:6:2}:${filename:8:2}:${filename:10:2}" \
                       "${filename:12:${#filename}-13-${#extension}}"
            done
        done
    done
}

function assemble(){
    local cmd_assemble; cmd_assemble=$(which eve4ceph-mdti 2>/dev/null)
    [ -z "$cmd_assemble" ] && { log error "eve4ceph-mdti (Merge Diff file To Image for Ceph) command not found. See https://github.com/EnterpriseVE/eve4ceph-mdti"; exit 1; }

    parse_opts "$@"

    for vm_id in $vm_ids; do
        get_path   

        local title="EnterpriseVE BARC | Assemble"

        #list all image available 
        images=($(ls "$path_backup/"*$EXT_IMAGE | \
                  xargs -n 1 basename | \
                  awk '{printf "%s %s\n",substr($1,13,length($1)-16),substr($1,13,length($1)-16)}'))

        #select image to recovery
        local image;
        image=$(whiptail --title "$title" \
                --menu "Choose from available images:" \
                --notags 25 60 14 "${images[@]}" 3>&1 1>&2 2>&3)

        [ -z "$image" ] && exit 1

        #list all date available 
        timestamps=($(ls -r "$path_backup/"*$image* | \
                      xargs -n 1 basename | \
                      awk '{print substr($1,1,12),substr($1,1,2) "-" substr($1,3,2) "-" substr($1,5,2) "_" substr($1,7,2) ":" substr($1,9,2) ":" substr($1,11,2)}'))

        #select timestamp
        local timestamp
        timestamp=$(whiptail --title "$title" \
                    --menu "Choose from available date [$image]:" \
                    --notags 25 60 14 "${timestamps[@]}" 3>&1 1>&2 2>&3)

        [ -z "$timestamp" ] && exit 1

        local new_image="assemble-$image" 
        if ! whiptail --title "$title" --yesno "Confrim assemble $image in $new_image?" 8 78; then
            exit 1
        fi

        call_hook_script "assemble-job-start" "-" "-"
        log info "Start assemble process"

        log info "Copy image to '$path_backup/$new_image'"
        do_run "cp $path_backup/*$image$EXT_IMAGE '$path_backup/$new_image$EXT_IMAGE'"

        #loop image and assemble
        local backup=''
        for backup in $path_backup/*$image*; do
            if [[ $backup == *"$EXT_DIFF" ]]; then
                log info "Assemble $backup"
                do_run "$cmd_assemble '$path_backup/$new_image$EXT_IMAGE' '$backup'"
            fi

            [[ $backup == "$path_backup/$timestamp.$image"* ]] && break;        
        done     

        log info "Backup $image assebled in $new_image with success!"    

        call_hook_script "assemble-job-end" "-" "-"

        break;
    done
}

function end_process(){
    local -i rc=$1;

    local subject="Log $NAME"
    [ $rc != 0 ] && subject="$subject [ERROR]"

    #send email
    local mail;
    for mail in $(echo "$opt_addr_mail" | tr "," "\n"); do
        do_run "cat '$LOG_FILE' | mail -s '$subject' '$mail'"
    done

    #remove log
    rm "$LOG_FILE"

    exit "$rc";
}

function main(){    
    [ $# = 0 ] && usage;

    #command
    case "$1" in
        version) echo "$VERSION";;
        help) usage "$@";;
        create|destroy|enable|disable) cron_action_job "$@";;
        backup) backup "$@";; 
        restore) restore "$@";;       
        clean) clean "$@";;
        status) status "$@";; 
        reset) reset "$@";; 
        assemble) assemble "$@";; 
        *) usage;;
    esac

    exit 0;
}

main "$@"
